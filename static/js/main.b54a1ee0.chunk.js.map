{"version":3,"sources":["components/Searchbar/Searchbar.jsx","services/pixabay-api.jsx","components/ImageGallery/ImageGalleryItem/ImageGalleryItem.jsx","components/Button/Button.jsx","components/Loader/Loader.jsx","components/Modal/Modal.jsx","components/ImageGallery/ImageGallery.jsx","App.js","index.js"],"names":["Searchbar","submit","useState","searchImageName","setSearchImageName","className","onSubmit","e","preventDefault","trim","toast","error","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","fetchImages","page","fetch","then","response","ok","json","ImageGalleryItem","image","webformatURL","tags","onModalOpen","onClick","src","alt","Button","onBtnClick","LoaderSpinner","role","color","height","width","timeout","Modal","onModalClose","activeModalImg","largeImageURL","useEffect","window","addEventListener","handleKeyDown","removeEventListener","keyCode","target","Status","ImageGallery","images","setImages","setError","status","setStatus","showModal","setShowModal","loading","setLoading","setActiveModalImg","lastPage","setLastPage","setTimeout","scrollTo","top","document","documentElement","scrollHeight","behavior","toggleModal","message","map","id","Loader","hits","total","Error","catch","loadImages","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"qRAIe,SAASA,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAClC,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAkBA,OACE,wBAAQC,UAAU,YAAlB,SAEE,uBAAMA,UAAU,aAAaC,SAdZ,SAAAC,GAGnB,GAFAA,EAAEC,iBAE6B,KAA3BL,EAAgBM,OAClB,OAAOC,IAAMC,MAAM,6BAGrBV,EAAOE,GACPC,EAAmB,KAMjB,UACE,wBAAQQ,KAAK,SAASP,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,sBAGF,uBACEA,UAAU,mBACVO,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,MAAOb,EACPc,SA/BkB,SAAC,GAAkC,IAAfD,EAAc,EAA/BE,cAAiBF,MAC5CZ,EAAmBY,EAAMG,uB,WCMdC,MAdf,SAAqBjB,EAAiBkB,GAGpC,OAAOC,MAAM,8BAAD,OACoBnB,EADpB,iBAC4CkB,EAD5C,gBAFI,qCAEJ,yDAEVE,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAGXF,MCGIG,EAVU,SAAC,GAAD,QACvBC,MAASC,EADc,EACdA,aAAcC,EADA,EACAA,KACvBF,EAFuB,EAEvBA,MACAG,EAHuB,EAGvBA,YAHuB,OAMvB,aADA,CACA,MAAI1B,UAAU,mBAAmB2B,QAAS,kBAAMD,EAAYH,IAA5D,SACE,qBAAKK,IAAKJ,EAAcK,IAAKJ,EAAMzB,UAAU,8BCFlC8B,EALA,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACb,wBAAQxB,KAAK,SAASP,UAAU,SAAS2B,QAASI,EAAlD,2B,iBCWaC,G,MAXO,kBACpB,qBAAKC,KAAK,QAAQjC,UAAU,SAA5B,SACE,cAAC,IAAD,CACEO,KAAK,eACL2B,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,UCRA,SAASC,EAAT,GAGX,IAAD,OAFDC,EAEC,EAFDA,aAEC,IADDC,eAAkBC,EACjB,EADiBA,cAAehB,EAChC,EADgCA,KAEjCiB,qBAAU,WAIR,OAHAC,OAAOC,iBAAiB,UAAWC,GAG5B,WACLF,OAAOG,oBAAoB,UAAW,EAAKD,mBAI/C,IAAMA,EAAgB,SAAA3C,GACF,KAAdA,EAAE6C,SACJR,KAUJ,OACE,qBAAKvC,UAAU,UAAU2B,QAPC,SAAAzB,GACtBA,EAAEW,gBAAkBX,EAAE8C,QACxBT,KAKF,SACE,qBAAKvC,UAAU,QAAf,SACE,qBAAK4B,IAAKa,EAAeZ,IAAKJ,EAAMzB,UAAU,iBCnBtD,IAAMiD,EACE,OADFA,EAGM,WAHNA,EAIM,WAIG,SAASC,EAAT,GAA4C,IAApBpD,EAAmB,EAAnBA,gBACrC,EAA4BD,mBAAS,IAArC,mBAAOsD,EAAP,KAAeC,EAAf,KACA,EAA0BvD,mBAAS,MAAnC,mBAAOS,EAAP,KAAc+C,EAAd,KACA,EAA4BxD,mBAASoD,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEA,EAAkC1D,mBAAS,MAA3C,mBAAO2D,EAAP,KAAkBC,EAAlB,KACA,EAA8B5D,oBAAS,GAAvC,mBAAO6D,EAAP,KAAgBC,EAAhB,KACA,EAA4C9D,mBAAS,MAArD,mBAAO2C,EAAP,KAAuBoB,EAAvB,KACA,EAAgC/D,mBAAS,GAAzC,mBAAOgE,EAAP,KAAiBC,EAAjB,KAEApB,qBAAU,WAMRU,EAAU,MAET,CAACtD,IAEJ4C,qBAAU,WAMRqB,YAAW,WACTpB,OAAOqB,SAAS,CACdC,IAAKC,SAASC,gBAAgBC,aAC9BC,SAAU,aAEX,KACF,CAAClB,IAEJ,IA2BMmB,EAAc,WAClBb,GAAcD,IAGV9B,EAAc,SAAAc,GAClBoB,EAAkBpB,GAClB8B,KAQF,OAAIhB,IAAWL,EACN,qBAAKjD,UAAU,eAAf,uCAOLsD,IAAWL,EACN,6BAAK3C,EAAMiE,UAGhBjB,IAAWL,EAEX,qCAEE,oBAAIjD,UAAU,eAAd,SACGmD,EAAOqB,KAAI,SAAAjD,GAAK,OACf,cAAC,EAAD,CAEEG,YAAaA,EAKbH,MAAOA,GAPT,2BAC2BA,EAAMkD,UAUpCf,GAAW,cAACgB,EAAD,IACZ,cAAC,EAAD,CAAQ3C,WAnCK,WACjB4B,GAAW,GArCM,SAAC3C,EAAMlB,GACxB6D,GAAW,GACXG,EAAY9C,GAEZ+C,YAAW,WACThD,EAAYjB,EAAiBkB,GAC1BE,MAAK,YAAsB,IAAnByD,EAAkB,EAAlBA,KACP,GADyB,EAAZC,MAQXxB,EAAU,GAAD,mBAAMD,GAAU,IAAhB,YAAwBwB,KACjCpB,EAAUN,OARA,CACV,IAAM3C,EAAQ,IAAIuE,MAAJ,mCACgB/E,EADhB,wCAGduD,EAAS/C,GACTiD,EAAUN,OAMb6B,OAAM,SAAAxE,GACL+C,EAAS/C,GACTiD,EAAUN,MAGdU,GAAW,KACV,KAcHoB,CAAWlB,EAAW,MAmCjBL,GACC,cAAClB,EAAD,CAAOC,aAAc+B,EAAa9B,eAAgBA,YArB1D,E,MCjGa,SAASwC,IACtB,MAA8CnF,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAMA,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,IAAD,IAGA,cAACL,EAAD,CAAWC,OAAQG,IAGnB,cAACmD,EAAD,CAAcpD,gBAAiBA,OCnBrCmF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjB,SAASkB,eAAe,W","file":"static/js/main.b54a1ee0.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nexport default function Searchbar({ submit }) {\n  const [searchImageName, setSearchImageName] = useState('');\n\n  const handleImageChange = ({ currentTarget: { value } }) => {\n    setSearchImageName(value.toLowerCase());\n  };\n\n  // при сабмите формы\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (searchImageName.trim() === '') {\n      return toast.error('What picture do you need?');\n    }\n\n    submit(searchImageName);\n    setSearchImageName('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      {/* onSubmit - регистрация на событии сабмита на встроенном компоненте form */}\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          value={searchImageName}\n          onChange={handleImageChange}\n        />\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  submit: PropTypes.func.isRequired,\n};\n","function fetchImages(searchImageName, page) {\n  const API_KEY = '22935349-f238c1b9d1a1a29229f76f105';\n\n  return fetch(\n    `https://pixabay.com/api/?q=${searchImageName}&page=${page}&key=${API_KEY}&image_type=photo&orientation=horizontal&per_page=12`,\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    return response;\n  });\n}\n\nexport default fetchImages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ImageGalleryItem = ({\n  image: { webformatURL, tags },\n  image,\n  onModalOpen,\n}) => (\n  // <li className=\"ImageGalleryItem\">\n  <li className=\"ImageGalleryItem\" onClick={() => onModalOpen(image)}>\n    <img src={webformatURL} alt={tags} className=\"ImageGalleryItem-image\" />\n  </li>\n);\nexport default ImageGalleryItem;\n\nImageGalleryItem.propTypes = {\n  image: PropTypes.shape({\n    webformatURL: PropTypes.string,\n    tags: PropTypes.string,\n  }).isRequired,\n  onModalOpen: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Button = ({ onBtnClick }) => (\n  <button type=\"button\" className=\"Button\" onClick={onBtnClick}>\n    Load more...\n  </button>\n);\nexport default Button;\n\nButton.propTypes = {\n  onBtnClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nconst LoaderSpinner = () => (\n  <div role=\"alert\" className=\"loader\">\n    <Loader\n      type=\"MutatingDots\"\n      color=\"#3f51b5\"\n      height={100}\n      width={100}\n      timeout={2000}\n    />\n  </div>\n);\nexport default LoaderSpinner;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Modal({\n  onModalClose,\n  activeModalImg: { largeImageURL, tags },\n}) {\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    // очистить\n    return () => {\n      window.removeEventListener('keydown', this.handleKeyDown);\n    };\n  });\n\n  const handleKeyDown = e => {\n    if (e.keyCode === 27) {\n      onModalClose();\n    }\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onModalClose();\n    }\n  };\n\n  return (\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\n      <div className=\"Modal\">\n        <img src={largeImageURL} alt={tags} className=\"modalImg\" />\n      </div>\n    </div>\n  );\n}\n\nModal.propTypes = {\n  onModalClose: PropTypes.func.isRequired,\n  activeModalImg: PropTypes.shape({\n    largeImageURL: PropTypes.string.isRequired,\n    tags: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { Component } from 'react';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport fetchImages from 'services/pixabay-api';\n\nimport ImageGalleryItem from './ImageGalleryItem/ImageGalleryItem';\n// import ImageGalleryList from './ImageGalleryList/ImageGalleryList';\nimport Button from '../Button/Button';\nimport Loader from '../Loader/Loader';\nimport Modal from '../Modal/Modal';\n\nconst Status = {\n  IDLE: 'idle', //  простой, стоит и ничего не делает\n  PENDING: 'pending', // ожидается выполнение\n  RESOLVED: 'resolved', // выполнилось с результатом хорошо\n  REJECTED: 'rejected', // отклонено\n};\n\n// деструктуризировать props и забрать у него нужный пропс - searchImageName\nexport default function ImageGallery({ searchImageName }) {\n  const [images, setImages] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n  // const [showModal, setShowModal] = useState(false);\n  const [showModal, setShowModal] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [activeModalImg, setActiveModalImg] = useState(null);\n  const [lastPage, setLastPage] = useState(1);\n\n  useEffect(() => {\n    // if (contacts === '') {\n    //   // if (!contacts) {\n    //   return;\n    // }\n\n    setImages([]);\n    // loadImages(1);\n  }, [searchImageName]);\n\n  useEffect(() => {\n    // if (contacts === '') {\n    //   // if (!contacts) {\n    //   return;\n    // }\n\n    setTimeout(() => {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      });\n    }, 0);\n  }, [images]);\n\n  const loadImages = (page, searchImageName) => {\n    setLoading(true);\n    setLastPage(page);\n\n    setTimeout(() => {\n      fetchImages(searchImageName, page)\n        .then(({ hits, total }) => {\n          if (!total) {\n            const error = new Error(\n              `There is no picture with ${searchImageName} name, please enter another request`,\n            );\n            setError(error);\n            setStatus(Status.REJECTED);\n          } else {\n            setImages([...(images || []), ...hits]);\n            setStatus(Status.RESOLVED);\n          }\n        })\n        .catch(error => {\n          setError(error);\n          setStatus(Status.REJECTED);\n        });\n\n      setLoading(false);\n    }, 1000);\n  };\n\n  const toggleModal = () => {\n    setShowModal(!showModal);\n  };\n\n  const onModalOpen = activeModalImg => {\n    setActiveModalImg(activeModalImg);\n    toggleModal();\n  };\n\n  const onBtnClick = () => {\n    setLoading(true);\n    loadImages(lastPage + 1);\n  };\n\n  if (status === Status.IDLE) {\n    return <div className=\"errorMessage\">Please enter your request</div>;\n  }\n\n  // if (status === Status.PENDING) {\n  //   return <Loader />;\n  // }\n\n  if (status === Status.REJECTED) {\n    return <h1>{error.message}</h1>;\n  }\n\n  if (status === Status.RESOLVED) {\n    return (\n      <>\n        {/* <ImageGalleryList images={images} onModalOpen={this.onModalOpen} /> */}\n        <ul className=\"ImageGallery\">\n          {images.map(image => (\n            <ImageGalleryItem\n              key={`image-item-image-${image.id}`}\n              onModalOpen={onModalOpen}\n              // webformatURL={image.webformatURL}\n              // tags={image.tags}\n              // largeImageURL={image.largeImageURL}\n              // {...image}\n              image={image}\n            />\n          ))}\n        </ul>\n        {loading && <Loader />}\n        <Button onBtnClick={onBtnClick} />\n\n        {showModal && (\n          <Modal onModalClose={toggleModal} activeModalImg={activeModalImg} />\n        )}\n      </>\n    );\n  }\n}\n\n// class ImageGallery extends Component {\n//   state = {\n//     images: [],\n//     error: null,\n//     status: Status.IDLE,\n//     showModal: false,\n//     loading: false,\n\n//     activeModalImg: null,\n//     lastPage: 1,\n//   };\n\n//   // когда компонент обновляется\n//   componentDidUpdate(prevProps, prevState) {\n//     const { searchImageName } = this.props;\n\n//     // всегда нужно делать проверку, потому что может зациклить компонент!\n//     // предыдущий пропс имг и следующий(текущий) пропс имг\n//     // старый рендет-новый рендер\n//     if (prevProps.searchImageName !== searchImageName) {\n//       this.setState({ images: [] }, () => {\n//         this.loadImages(1);\n//       });\n//     }\n\n//     if (prevState.images !== this.state.images) {\n//       setTimeout(() => {\n//         window.scrollTo({\n//           top: document.documentElement.scrollHeight,\n//           behavior: 'smooth',\n//         });\n//       }, 0);\n//     }\n//   }\n\n//   loadImages = page => {\n//     const { images } = this.state;\n//     const { searchImageName } = this.props;\n\n//     this.setState({ loading: true, lastPage: page });\n//     setTimeout(() => {\n//       fetchImages(searchImageName, page)\n//         .then(({ hits, total }) => {\n//           if (!total) {\n//             const error = new Error(\n//               `There is no picture with ${searchImageName} name, please enter another request`,\n//             );\n//             this.setState({ error, status: Status.REJECTED });\n//           } else {\n//             this.setState({\n//               images: [...(images || []), ...hits],\n//               status: Status.RESOLVED,\n//             });\n//           }\n//         })\n//         .catch(error => this.setState({ error, status: Status.REJECTED }));\n\n//       this.setState({ loading: false });\n//     }, 1000);\n//   };\n\n//   toggleModal = () => {\n//     this.setState(({ showModal }) => ({ showModal: !showModal }));\n//   };\n\n//   onModalOpen = activeModalImg => {\n//     this.setState({ activeModalImg });\n//     this.toggleModal();\n//   };\n\n//   onBtnClick = () => {\n//     const { lastPage } = this.state;\n//     this.setState({ loading: true });\n//     this.loadImages(lastPage + 1);\n//   };\n\n//   render() {\n//     const { images, error, status, showModal, loading, activeModalImg } =\n//       this.state;\n\n//     if (status === Status.IDLE) {\n//       return <div className=\"errorMessage\">Please enter your request</div>;\n//     }\n\n//     // if (status === Status.PENDING) {\n//     //   return <Loader />;\n//     // }\n\n//     if (status === Status.REJECTED) {\n//       return <h1>{error.message}</h1>;\n//     }\n\n//     if (status === Status.RESOLVED) {\n//       return (\n//         <>\n//           {/* <ImageGalleryList images={images} onModalOpen={this.onModalOpen} /> */}\n//           <ul className=\"ImageGallery\">\n//             {images.map(image => (\n//               <ImageGalleryItem\n//                 key={`image-item-image-${image.id}`}\n//                 onModalOpen={this.onModalOpen}\n//                 // webformatURL={image.webformatURL}\n//                 // tags={image.tags}\n//                 // largeImageURL={image.largeImageURL}\n//                 // {...image}\n//                 image={image}\n//               />\n//             ))}\n//           </ul>\n//           {loading && <Loader />}\n//           <Button onBtnClick={this.onBtnClick} />\n\n//           {showModal && (\n//             <Modal\n//               onModalClose={this.toggleModal}\n//               activeModalImg={activeModalImg}\n//             />\n//           )}\n//         </>\n//       );\n//     }\n//   }\n// }\n// export default ImageGallery;\n\nImageGallery.propTypes = {\n  searchImageName: PropTypes.string.isRequired,\n};\n","import { useState } from 'react';\n\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport ImageGallery from 'components/ImageGallery/ImageGallery';\n\nimport './App.css';\n\nexport default function App() {\n  const [searchImageName, setSearchImageName] = useState('');\n\n  // const handleFormSubmit = searchImageName => {\n  //   setSearchImageName(searchImageName);\n  // };\n\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n\n      {/* в Searchbar передаю проп submit(имя пропса), куда я передаю ссылку на метод handleFormSubmit */}\n      <Searchbar submit={setSearchImageName} />\n      {/* <Searchbar submit={handleFormSubmit} /> */}\n\n      <ImageGallery searchImageName={searchImageName} />\n    </div>\n  );\n}\n\n//PureComponent и shouldComponentUpdate\n\n// --------------------\n// API - bk\n\n// const fn = a => {\n//   return console.log(a);\n// };\n// fn('2');\n// fn('a');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}